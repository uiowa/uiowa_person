<?php

/**
 * @file
 * Provides basic web profiles for sites.
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Routing\RouteMatchInterface;

/**
 * Implements hook_help().
 */
function uiowa_person_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.uiowa_person':
      $filepath = dirname(__FILE__) . '/README.md';
      if (file_exists($filepath)) {
        $readme = file_get_contents($filepath);
      }
      else {
        $filepath = dirname(__FILE__) . '/README.txt';
        if (file_exists($filepath)) {
          $readme = file_get_contents($filepath);
        }
      }
      if (!isset($readme)) {
        return NULL;
      }

      /* @var \Drupal\Core\Extension\ModuleHandler $moduleHandler*/
      $moduleHandler = \Drupal::service('module_handler');
      if ($moduleHandler->moduleExists('markdown')) {
        $filters = $moduleHandler->invoke('markdown', 'filter_info');
        $info = $filters['filter_markdown'];

        if (function_exists($info['process callback'])) {
          $output = $info['process callback']($readme, NULL);
        }
        else {
          $output = '<pre>' . $readme . '</pre>';
        }
      }
      else {
        $output = '<pre>' . $readme . '</pre>';
      }

      return $output;
  }
}

/**
 * Implements hook_page_attachments().
 */
function uiowa_person_page_attachments(array &$attachments) {
  $attachments['#attached']['library'][] = 'uiowa_person/uiowa_person_styling';
}

/**
 * Implements hook_theme().
 */
function uiowa_person_theme(array $variables) {
  $theme = [];

  $theme['node__person'] = [
    'render element' => 'content',
    'base hook' => 'node',
    'template' => 'node--person',
    'path' => drupal_get_path('module', 'uiowa_person') . '/templates',
  ];

  $theme['node__person__teaser'] = [
    'render element' => 'content',
    'base hook' => 'node',
    'template' => 'node--person--teaser',
    'path' => drupal_get_path('module', 'uiowa_person') . '/templates',
  ];

  return $theme;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function uiowa_person_form_node_form_alter(&$form, FormStateInterface &$form_state, $form_id) {
  // Get the node entity from the form.
  $entity = $form_state->getFormObject()->getEntity();

  // Hide the node title and set default stub.
  if ($entity->bundle() == 'person') {
    $form['title']['#type'] = 'hidden';
    $form['title']['widget'][0]['value']['#default_value'] = 'DEFAULT NAME';
    $form['title']['widget'][0]['value']['#attributes']['disabled'] = TRUE;
  }
}

/**
 * Implements hook_entity_presave().
 */
function uiowa_person_entity_presave(EntityInterface $entity) {
  switch ($entity->bundle()) {
    case 'person':
      // Setting the title with the value of output.
      $output = '';
      $output .= $entity->get('person_first_name')->value;
      if (!empty($entity->get('person_middle_name')->value)) {
        $output .= " " . substr($entity->get('person_middle_name')->value, 0, 1);
      }
      else {
        $output .= " ";
      }
      $output .= " " . $entity->get('person_last_name')->value;
      if (!empty($entity->get('person_suffix')->value)) {
        $output .= ", " . $entity->get('person_suffix')->value;
      }
      if (!empty($entity->get('person_credentials')->value)) {
        $output .= ", " . $entity->get('person_credentials')->value;
      }
      $entity->setTitle($output);
      break;
  }
}
